--Получаем дату с которой будем обновлять данные
CREATE OR REPLACE TEMPORARY TABLE ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HIT_DATE
AS
SELECT
    MIN(META_CHECKPOINT) AS MIN_HIT_DATE
FROM
    ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737.HITS_159737 main
WHERE 
    ${CONDITION}
;

--Получаем новую порцию данных HITS
CREATE OR REPLACE TEMPORARY TABLE ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HITS
AS
SELECT
     PARSE_JSON(DATA):"ym:pv:watchID"::NUMBER(19,0) AS WATCH_ID
    ,PARSE_JSON(DATA):"ym:pv:clientID"::VARCHAR(100) AS CLIENT_ID
    ,PARSE_JSON(DATA):"ym:pv:counterID"::VARCHAR(100) AS COUNTER_ID
    ,PARSE_JSON(DATA):"ym:pv:date"::DATE AS DATE
    ,PARSE_JSON(DATA):"ym:pv:dateTime"::TIMESTAMP_NTZ(9) AS DATE_TIME
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:title", '')::VARCHAR(4000) AS TITLE
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:URL", '')::VARCHAR(8000) AS URL
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:GCLID", '')::VARCHAR(4000) AS GCLID
    ,PARSE_JSON(DATA):"ym:pv:artificial"::NUMBER(38, 0) AS ARTIFICIAL
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:pageCharset", '')::VARCHAR(150) AS PAGE_CHARSET
    ,PARSE_JSON(DATA):"ym:pv:isPageView"::NUMBER(38, 0) AS IS_PAGE_VIEW
    ,PARSE_JSON(DATA):"ym:pv:link"::NUMBER(38, 0) AS LINK
    ,PARSE_JSON(DATA):"ym:pv:download"::NUMBER(38, 0) AS DOWNLOAD
    ,PARSE_JSON(DATA):"ym:pv:notBounce"::NUMBER(38, 0) AS NOT_BOUNCE
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:httpError", '')::VARCHAR(150) AS HTTP_ERROR
    ,IFF(
        PARSE_JSON(DATA):"ym:pv:goalsID" = '[]',
        NULL,
        PARSE_JSON(PARSE_JSON(DATA):"ym:pv:goalsID")
     )::ARRAY AS GOALS_ID
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:shareService"::VARCHAR(150), '') AS SHARE_SERVICE
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:shareURL"::VARCHAR(150), '') AS SHARE_URL
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:shareTitle"::VARCHAR(4000), '') AS SHARE_TITLE
    ,PARSE_JSON(DATA):"ym:pv:iFrame"::NUMBER(38, 0) AS I_FRAME
    ,IFF(
        PARSE_JSON(DATA):"ym:pv:parsedParamsKey1" LIKE ANY ('[]', '[\'\'%]'),
        NULL,
        PARSE_JSON(PARSE_JSON(DATA):"ym:pv:parsedParamsKey1")
     )::ARRAY AS PARSED_PARAMS_KEY_1
    ,IFF(
        PARSE_JSON(DATA):"ym:pv:parsedParamsKey2" LIKE ANY ('[]', '[\'\'%]'),
        NULL,
        PARSE_JSON(REGEXP_REPLACE(PARSE_JSON(DATA):"ym:pv:parsedParamsKey2", '"'))
     )::ARRAY AS PARSED_PARAMS_KEY_2
    ,LEFT(GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventPagePath'::VARIANT, PARSED_PARAMS_KEY_1)),150)::VARCHAR(150) AS EVENT_PAGE_PATH
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventCategory'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS EVENT_CATEGORY
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventAction'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(500) AS EVENT_ACTION
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventValue'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS EVENT_VALUE
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventLabel'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(4000) AS EVENT_LABEL
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('ABVariant'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS AB_VARIANT
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('order_price'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS ORDER_PRICE
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('currency'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS CURRENCY
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('dndForm'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS DND_FORM
    ,CASE
        WHEN EVENT_CATEGORY IS NOT NULL THEN 'event'
        WHEN IS_PAGE_VIEW = 1 THEN 'pageview'
        WHEN LINK = 1 AND DOWNLOAD = 0 THEN 'link'
        WHEN DOWNLOAD = 1 THEN 'download'
        WHEN NOT_BOUNCE = 1 THEN 'not_bounce'
        WHEN HTTP_ERROR = 1 THEN 'http_error'
        WHEN GOALS_ID IS NOT NULL THEN 'goal'
        ELSE 'other'
     END::VARCHAR(150) AS HIT_TYPE
    ,META_TIMESTAMP::TIMESTAMP_NTZ(9) AS META_TIMESTAMP
FROM 
    ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737.HITS_159737 AS main
WHERE 
    main.META_CHECKPOINT >= (SELECT IFNULL(MIN_HIT_DATE,'1970-01-01') FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HIT_DATE)
;

--Получаем все необходимые VISITS для соединения с HITS
CREATE OR REPLACE TEMPORARY TABLE ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._VISITS
as
--берем все visits которые были изменены после крайней порции данных в витрине hits (по ним нужно пересчитать hits)
--это нужно для случая когда обновились только VISITS и по ним нужно обновить HITS
SELECT 
     VISIT_ID
    ,WID.VALUE::NUMBER(19,0) AS WATCH_ID
    ,DATE::DATE AS DATE
FROM 
    ${ENV_PREFIX}DWH.KIMBALL.VISITS main
    ,lateral FLATTEN(INPUT => WATCH_IDS) AS WID
        
WHERE 
      main.META_SUBPROC_CODE = 'Kimball_YandexMetrika_159737_visits'
    AND (DATE >= (SELECT DATEADD(DAY,-1,MIN(DATE)) FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HITS)
         OR (${CONDITION})
        )
;
    
--Добираем HITS по изменившимся VISITS которые получили в новой порции
--если к примеру мы получили данные по VISITS за пару дней назад, то HITS не обновятся сами
--нужно добрать такие строки и обновить для них связку с VISITS

--Если мы получили все строки HITS, то уже не нужно что-то добирать, 
--поэтому получим признак который будет отключать следующие дейсвия в таком случае 
CREATE OR REPLACE TEMPORARY TABLE ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._IS_NEED_MORE_HITS
AS
SELECT CASE WHEN (SELECT MIN(META_TIMESTAMP) FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HITS)
                 >
                 (SELECT MIN(META_TIMESTAMP) FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737.HITS_159737)
            THEN 1
            ELSE 0
      END AS MORE_HITS
;      
--получаем те Watch_ID которые у нас есть в VISITS, но нет в HITS
CREATE OR REPLACE TEMPORARY TABLE ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._VISITS_NOHITS
AS
SELECT 
    WATCH_ID
FROM 
    ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._VISITS V
WHERE 
    (SELECT MORE_HITS FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._IS_NEED_MORE_HITS) = 1
    AND NOT EXISTS (SELECT NULL
                    FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HITS
                    WHERE WATCH_ID = V.WATCH_ID)
;
--далее догрузим недостающие HITS
INSERT INTO ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HITS
SELECT
     PARSE_JSON(DATA):"ym:pv:watchID"::NUMBER(19,0) AS WATCH_ID
    ,PARSE_JSON(DATA):"ym:pv:clientID"::VARCHAR(100) AS CLIENT_ID
    ,PARSE_JSON(DATA):"ym:pv:counterID"::VARCHAR(100) AS COUNTER_ID
    ,PARSE_JSON(DATA):"ym:pv:date"::DATE AS DATE
    ,PARSE_JSON(DATA):"ym:pv:dateTime"::TIMESTAMP_NTZ(9) AS DATE_TIME
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:title", '')::VARCHAR(4000) AS TITLE
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:URL", '')::VARCHAR(8000) AS URL
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:GCLID", '')::VARCHAR(4000) AS GCLID
    ,PARSE_JSON(DATA):"ym:pv:artificial"::NUMBER(38, 0) AS ARTIFICIAL
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:pageCharset", '')::VARCHAR(150) AS PAGE_CHARSET
    ,PARSE_JSON(DATA):"ym:pv:isPageView"::NUMBER(38, 0) AS IS_PAGE_VIEW
    ,PARSE_JSON(DATA):"ym:pv:link"::NUMBER(38, 0) AS LINK
    ,PARSE_JSON(DATA):"ym:pv:download"::NUMBER(38, 0) AS DOWNLOAD
    ,PARSE_JSON(DATA):"ym:pv:notBounce"::NUMBER(38, 0) AS NOT_BOUNCE
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:httpError", '')::VARCHAR(150) AS HTTP_ERROR
    ,IFF(
        PARSE_JSON(DATA):"ym:pv:goalsID" = '[]',
        NULL,
        PARSE_JSON(PARSE_JSON(DATA):"ym:pv:goalsID")
    )::ARRAY AS GOALS_ID
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:shareService"::VARCHAR(150), '') AS SHARE_SERVICE
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:shareURL"::VARCHAR(150), '') AS SHARE_URL
    ,NULLIF(PARSE_JSON(DATA):"ym:pv:shareTitle"::VARCHAR(4000), '') AS SHARE_TITLE
    ,PARSE_JSON(DATA):"ym:pv:iFrame"::NUMBER(38, 0) AS I_FRAME
    ,IFF(
        PARSE_JSON(DATA):"ym:pv:parsedParamsKey1" LIKE ANY ('[]', '[\'\'%]'),
        NULL,
        PARSE_JSON(PARSE_JSON(DATA):"ym:pv:parsedParamsKey1")
    )::ARRAY AS PARSED_PARAMS_KEY_1
    ,IFF(
        PARSE_JSON(DATA):"ym:pv:parsedParamsKey2" LIKE ANY ('[]', '[\'\'%]'),
        NULL,
        PARSE_JSON(REGEXP_REPLACE(PARSE_JSON(DATA):"ym:pv:parsedParamsKey2", '"'))
    )::ARRAY AS PARSED_PARAMS_KEY_2
    ,LEFT(GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventPagePath'::VARIANT, PARSED_PARAMS_KEY_1)),150)::VARCHAR(150) AS EVENT_PAGE_PATH
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventCategory'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS EVENT_CATEGORY
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventAction'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(500) AS EVENT_ACTION
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventValue'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS EVENT_VALUE
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('eventLabel'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(4000) AS EVENT_LABEL
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('ABVariant'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS AB_VARIANT
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('order_price'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS ORDER_PRICE
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('currency'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS CURRENCY
    ,GET(PARSED_PARAMS_KEY_2, ARRAY_POSITION('dndForm'::VARIANT, PARSED_PARAMS_KEY_1))::VARCHAR(150) AS DND_FORM
    ,CASE
        WHEN EVENT_CATEGORY IS NOT NULL THEN 'event'
        WHEN IS_PAGE_VIEW = 1 AND ARTIFICIAL = 0 THEN 'pageview'
        WHEN LINK = 1 AND DOWNLOAD = 0 THEN 'link'
        WHEN DOWNLOAD = 1 THEN 'download'
        WHEN NOT_BOUNCE = 1 THEN 'not_bounce'
        WHEN HTTP_ERROR = 1 THEN 'http_error'
        WHEN GOALS_ID IS NOT NULL THEN 'goal'
        ELSE 'other'
    END::VARCHAR(150) AS HIT_TYPE
    ,META_TIMESTAMP AS META_TIMESTAMP
FROM
    ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737.HITS_159737 AS main
WHERE 
    (SELECT MORE_HITS FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._IS_NEED_MORE_HITS) = 1
    --VISITS и HITS должны иметь одну дату, дата не может быть больше чем meta_timestamp 
    --(мы не можем сегодня записать информацию про давтрашний просмотр к примеру)
    --поэтому ограничиваем по meta_timestamp
    AND main.META_TIMESTAMP >= (SELECT MIN(DATE) FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._VISITS)
    AND EXISTS (SELECT NULL
                FROM ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._VISITS_NOHITS
                WHERE PARSE_JSON(main.DATA):"ym:pv:watchID"::NUMBER(19,0) = WATCH_ID)
;    

${INSERT}
SELECT
    HASH(H.WATCH_ID, H.CLIENT_ID) ::NUMBER(19,0) AS HIT_ID
    ,H.WATCH_ID
    ,H.CLIENT_ID
    ,COUNTER_ID
    ,V.VISIT_ID
    ,H.DATE
    ,DATE_TIME
    ,TITLE
    ,URL
    ,GCLID
    ,ARTIFICIAL
    ,PAGE_CHARSET
    ,IS_PAGE_VIEW
    ,LINK
    ,DOWNLOAD
    ,NOT_BOUNCE
    ,HTTP_ERROR
    ,GOALS_ID
    ,SHARE_SERVICE
    ,SHARE_URL
    ,SHARE_TITLE
    ,I_FRAME
    ,EVENT_PAGE_PATH
    ,EVENT_CATEGORY
    ,EVENT_ACTION
    ,EVENT_VALUE
    ,EVENT_LABEL
    ,AB_VARIANT
    ,ORDER_PRICE
    ,CURRENCY
    ,DND_FORM
    ,HIT_TYPE
    ,META_TIMESTAMP ::TIMESTAMP_NTZ(9) AS META_TIMESTAMP
    ,'${meta_subproc_code}'::VARCHAR(255) AS meta_subproc_code
FROM
    ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._HITS AS H
    LEFT JOIN 
        ${ENV_PREFIX}ODS_BATCH.YANDEXMETRIKA_159737._VISITS AS V
        ON H.WATCH_ID = V.WATCH_ID
QUALIFY 
    ROW_NUMBER() OVER(PARTITION BY HIT_ID ORDER BY META_TIMESTAMP DESC) = 1
;
